[
    {
        "Contenido": "<h3> Tema 0: Introduccion a C </h3>\r\n\r\n        C es un lenguaje de programaci\u00f3n de prop\u00f3sito general. Se trata de un lenguaje de tipos de datos est\u00e1ticos, d\u00e9bilmente tipado,\r\n        de medio nivel, que dispone de las estructuras t\u00edpicas de los lenguajes de alto nivel pero, a su vez, dispone de construcciones\r\n        del lenguaje que permiten un control a bajo nivel. <br><br>\r\n\r\n        Como todo lenguaje, C dispone de palabras reservadas, es decir, palabras propias del lenguaje que nos permiten realizar una diversidad\r\n        de funciones y acciones con ellas y por ende no podemos usarlas para nombrar variables. <br><br>\r\n\r\n        Algunas de estas palabras son: <br><br>\r\n\r\n        auto &emsp;double &emsp;int &emsp;struct <br>\r\n        break &emsp;else &emsp;long &emsp;switch <br>\r\n        case &emsp;enum &emsp;register &emsp;typedef <br>\r\n        char &emsp;extern &emsp;return &emsp;union <br>\r\n        const &emsp;float &emsp;short &emsp;unsigned <br>\r\n        continue &emsp;for &emsp;signed &emsp;void <br>\r\n        default &emsp;goto &emsp;sizeof &emsp;volatile <br>\r\n        do &emsp;if &emsp;static &emsp;while <br><br>\r\n\r\n        De igual forma en C siempre terminamos una sentencia con ';'. Y se hace uso de \"Librerias\", donde la mas usada es \"stdio.h\"\r\n        (standar input output) y requerimos de un metodo principal \"main\". Asi como que los bloques de codigo estan delimitados por \"{...}\". <br><br>\r\n\r\n        Ejemplo 1: Mi primer programa en C: <br><br>\r\n\r\n        // La doble pleca indica un comentario, es decir el compilador no lo toma como una sentencia <br><br>\r\n\r\n        // Incluimos nuestras librerias (siempre van al inicio de cada programa con extencion .c) <br>\r\n        // Las libreras se insertan de la siguiente manera #include <libreria.h> <br>\r\n\r\n        #include <stdio.h> <br><br>\r\n\r\n        // proseguimos escribiendo la funcion principal main y para comenzar a trabjar dentro de ella usamos los {} <br><br>\r\n\r\n        main() <br>\r\n        { <br>\r\n        \t&emsp;// printf es una funcion de stdio.h que imprime un mensaje en consola <br>\r\n        \t&emsp;printf(\"Hello World\"); <br><br>\r\n\r\n        \t&emsp;// El return 0 sirve para mostrarle al complilador donde finaliza el main. <br>\r\n        \t&emsp;return 0; <br>\r\n        }\r\n\r\n        <br> <br>\r\n\r\n        <b> Sigue aprendiendo :) </b> <br> <br>\r\n\r\n        <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Zgjdp9RQx-w\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\r\n"
    },
    {
        "Contenido": "Tema 1: Variables en C <br><br>\r\n\r\nAnteriormente hablabamos de que no podemos hacer uso de algunas palabras para nombrar variables, pero \u00bfQue significa la palabra \"VARIABLE\"? <br><br>\r\n\r\nUna variable en programacion es donde se guarda (y se recupera) datos que se utilizan en un programa. <br><br>\r\n\r\nCuando escribimos c\u00f3digo, las variables se utilizan para: <br><br>\r\n\r\n\t-Guardar datos y estados. <br>\r\n\t-Asignar valores de una variable a otra. <br>\r\n\t-Representar valores dentro de una expresi\u00f3n matem\u00e1tica. <br>\r\n\t-Mostrar valores por pantalla. <br><br>\r\n\r\nLas variables se representan de la siguiente manera: \"Tipo de dato \u2192 identificador variable \u2192 valor almacenado\" <br><br>\r\n\r\nCuando nos referimos a 'identificador variable', nos estamos refiriendo a el nombre con el cual identificaremos a nuestra variable,\r\npodemos utilizar cualquier nombre o letra para identificar una variable, sin embargo se suelen nombrar en dependencia del uso que se le\r\ndara o la informacion que guardaran. <br><br>\r\n\r\nEl 'Tipo de dato' no suele especificarse en todos los lenguajes de programacion, se usa mas en lenguajes debiles o viejos como C, Pascal, B, etc. <br><br>\r\n\r\nPor ejemplo, queremos guardar un numero entero, podemos crear la variable de la siguiente manera: <br><br>\r\n\r\nidentificador_variable  \t valor almacenado <br>\r\n\t  numero  \t\t     =\t\t    4 <br>\r\n\r\n<br> <br>\r\n\r\n        <b> Sigue aprendiendo :) </b> <br> <br>\r\n\r\n        <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/UxvUTk0NoYc\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"
    },
    {
        "Contenido": "Tema 2: Tipos de datos en C <br>\r\n\r\nComo menconamos antes en c utilizamos los \"Tipos De Datos\" para declarar variables e incluso funciones como el 'main' pero, \u00bfQue es un tipo de dato? <br><br>\r\n\r\nUn tipo de dato es la propiedad de un valor que determina su dominio (qu\u00e9 valores puede tomar),\r\nqu\u00e9 operaciones se le pueden aplicar y c\u00f3mo es representado internamente por el computador. <br><br>\r\n\r\nExisten muchos tipos de datos, aunque los mas utilizados son: <br><br>\r\n\r\n\t-void = se usa para representar algo nulo, que no retorna o contiene nada (que esta vacio). <br>\r\n\t-int = se usa para representar numeros enteros (Ej: -10, 100, 1000). <br>\r\n\t-long = tambien representa numeros enteros pero tiene mas alcance que los int (Ej: -4009112, 0, 20, 3000000). <br>\r\n\t-float = se usa para representar numeros flotantes, mejor conocidos como reales (Ej: 1.9, -6.32). <br>\r\n\t-char = lo usamos para representar caracteres (Ej: 'a', '$', '1'). <br>\r\n\t-boolean = lo usamos para representar estados de verdadero o falso. <br><br>\r\n\r\nAhora que ya sabemos los tipos de datos mas usados veamos como declaramos variables en C. <br><br>\r\n\r\nAnteriormente declaramos una variable llamada numero que contenia el valor 4 (numero = 4); sin embargo esa no es la forma correcta\r\nen la que declaraos variables en C, ya que nos falta especificar el tipo de datos de la variable 'numero',\r\ny eso se veria de la siguiente forma: <br><br>\r\n\r\n int numero = 4; <br><br>\r\n\r\n Tipo de dato \tidentificador_variable  \t valor_almacenado     fin_sentecia <br>\r\n\tint  \t\t\t\tnumero  \t    =\t        4 \t\t\t\t\t; <br><br>\r\n\r\nOtro aspecto muy importante que usaremos luego seran los identificadores de tipos de datos, estos a diferencia de los\r\nidentificadores de variables ya existen y cada tipo de dato posee uno, en otras palabras no podemos cambiarles el nombre.\r\nLos identificadores de los tipos de datos mas usados son: <br><br>\r\n\r\n\t-int = %d, %i (podemos usar cualquiera de los 2). <br>\r\n\t-long = %dl. <br>\r\n\t-float = %f. <br>\r\n\t-char = %c. <br>\r\n\r\n<br> <br>\r\n\r\n<b> Sigue aprendiendo :) </b> <br> <br>\r\n\r\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/TRwuPth2_P4\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"
    },
    {
        "Contenido": "Tema 3: Metodos de entrada y salida en C <br><br>\r\n\r\nAnteriormente en el tema 0 de la sesion 1 visualizamos una funcion llamada \"printf()\", la cual es un metodo de salida,\r\nes decir que muestra informacion al usuario. <br><br>\r\n\r\nSin embargo, tambien tenemos metodos de entrada, los cuales nos permiten obtener informacion que el usuario ingrese por teclado.\r\nLa funcion que utilizamos para eso se llama \"scanf()\" <br><br>\r\n\r\nRecordando los identifiadores de los tipos de datos de la sesion pasada, en esta funcion 'scanf' los usaremos para \"decirle\"\r\nal compilador que tipo de dato va a guardar, la estructura de la funcion scanf es la siguiente: <br><br>\r\n\r\nscanf(\"identificador_tipo_dato\", &Variable); <br><br>\r\n\r\ndonde el & es un caracter especial que indica la direccion en memoria de la variable 'Variable', cabe destacar que\r\nla variable 'Variable' debe ser del mismo tipo de dato que el del identificador y que lo que el usuario ingrese debe ser del mismo tipo\r\nde dato ya que sino nos generara un error. <br><br>\r\n\r\nveamos un programa para entenderlo mejor: <br><br>\r\n\r\n// incluimos las librerias <br>\r\n#include <stdio.h> <br><br>\r\n\r\n// declaramos el main pero ahora con un tipo de dato <br>\r\nint main() <br>\r\n{ <br>\r\n\t// declaramos una variable que guarde un dato entero sin darle un valor inicial <br>\r\n\tint numero; <br><br>\r\n\r\n\t// mostramos un mensaje para pedir un numero al usuario <br>\r\n\tprintf(\"Ingrese un numero entero: \"); <br>\r\n\r\n\t// obtenemos el valor que el usuario ingrese y lo guardamos en la variable numero <br>\r\n\tscanf(\"%d\", &numero); <br><br>\r\n\r\n\t/* imprimimos el numero usando el printf y el identificador de tipo de dato correspondiente a los enteros <br>\r\n\t el '\\n' representa un salto de linea */ <br>\r\n\tprintf(\"\\nel numero ingresado es %d\", numero); <br><br>\r\n\r\n\t// colocamos el return 0 que indica el fin del programa y que lo hemos concluido con exito <br>\r\n\treturn 0; <br>\r\n} <br><br>\r\n\r\nObservemos como en el printf usamos un identificador de tipo de dato dentro de las comillas, esto es debido a que la\r\nfuncion printf no puede imprimir valores de una variable con solo poner el nombre de la variable.\r\npodemos poner todos los identificadores y variables que quermos en el printf, ejemplo: <br><br>\r\n\r\nprintf(\"Varias variables: %d, %d, %f, %c\", v1, v2, v3, v4); <br><br>\r\n\r\nDonde el primer identificador corresponde a la primer variable despues de las comillas, el segundo a la segunda\r\nvariable y asi sucesivamente. Al igual que en el scanf, en el printf las variables deben ser del mismo tipo de dato que el de su\r\nidentificador correspondiente (v1 y v2 int, v3 float, v4 char). <br>\r\n\r\n<br> <br>\r\n\r\n<b> Sigue aprendiendo :) </b> <br> <br>\r\n\r\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/4PdRjWsOUlI\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"
    },
    {
        "Contenido": "<h3> Operadores logicos y aritmeticos en C </h3> <br>\r\n\r\n<b> Operadores aritmeticos </b> <br><br>\r\n\r\nEn C podemos usar operadores aritmeticos para realizar operaciones con variables, como sumar, restar, dividir y multiplicar. <br<br>\r\n\r\nPara sumar variables en C usamos el simbolo de suma convencional '+', este simbolo lo podemos usar con varoables de tipo numerico unicamente; <br>\r\n\r\nPara restar variables usamos el simbolo '-', para multiplicar '*' y para dividir usamos el simbolo '/' <br><br>\r\n\r\n// incluimos las librerias <br>\r\n#include <stdio.h> <br><br>\r\n\r\n// usamos el metodo main <br>\r\nint main() <br>\r\n{ <br>\r\n\r\n    &emsp;// declaramos 2 variables de tipo entero <br>\r\n    &emsp;int numero1, numero2; <br><br>\r\n\r\n    &emsp;// declaramos una variable que guarde la suma, resta, divicion y multiplicaccion <br>\r\n\t&emsp;int suma, resta, divicion, multiplicacion; <br><br>\r\n\r\n\t&emsp;// pedimos los valores de los numeros <br><br>\r\n\r\n\t&emsp;printf(\"Ingrese un numero entero: \"); <br>\r\n\t&emsp;scanf(\"%d\", &numero1); <br><br>\r\n\r\n\t&emsp;printf(\"Ingrese un numero entero: \"); <br>\r\n\t&emsp;scanf(\"%d\", &numero1); <br> <br>\r\n\r\n\t&emsp;// usamos el simbolo + para sumar los numeros <br>\r\n\t&emsp;suma = numero1 + numero2; <br><br>\r\n\r\n\t&emsp;// usamos el simbolo - para restar los numeros <br>\r\n\t&emsp;resta = numero1 - numero2; <br><br>\r\n\r\n\t&emsp;// usamos el simbolo * para multiplicar los numeros <br>\r\n\t&emsp;multiplicacion = numero1 * numero2; <br><br>\r\n\r\n\t&emsp;// usamos el simbolo / para dividir los numeros <br>\r\n\t&emsp;divicion = numero1 / numero2; <br><br>\r\n\r\n\t&emsp;// imprimimos el resultado <br>\r\n\t&emsp;printf(\"suma: %d \\t resta: %d, \\t divicion: %d \\t multiplicacion: %d\", suma, resta, divicion, multiplicacion); <br><br>\r\n\r\n    &emsp;// finalizamos el main <br>\r\n    &emsp;return 0; <br>\r\n\r\n} <br>\r\n\r\nTmabien podemos usar el simbolo % para obtener el modulo (residuo) de una divicion: <br><br>\r\n\r\n// incluimos las librerias <br>\r\n#include <stdio.h> <br><br>\r\n\r\n// usamos el metodo main <br>\r\nint main() <br>\r\n{ <br>\r\n\r\n    &emsp;// declaramos 2 variables de tipo entero <br>\r\n    &emsp;int numero1, numero2; <br><br>\r\n\r\n\t&emsp;// declaramos la variable que gusradara el residuo <br>\r\n    &emsp;int residuo; <br><br>\r\n\r\n\t&emsp;// pedimos los valores de los numeros <br><br>\r\n\r\n\t&emsp;printf(\"Ingrese un numero entero: \"); <br>\r\n\t&emsp;scanf(\"%d\", &numero1); <br><br>\r\n\r\n\t&emsp;printf(\"Ingrese un numero entero: \"); <br>\r\n\t&emsp;scanf(\"%d\", &numero1); <br> <br>\r\n\r\n\t&emsp;// calculamos el residuo de la divicion <br>\r\n\t&emsp;residuo = numero1 % numero2; <br><br>\r\n\r\n\t&emsp;// imprimimos el resultado <br>\r\n\t&emsp;printf(\"residuo de la divicion: %d\", residuo); <br><br>\r\n\r\n    &emsp;// finalizamos el main <br>\r\n    &emsp;return 0; <br>\r\n\r\n} <br><br><br>\r\n\r\n<b> Operadores logicos </b> <br><br>\r\n\r\nEn C podemos encontrar los siguientes operadores logicos: <br><br>\r\n\r\n&emsp; < (menor que) <br>\r\n&emsp; > (mayor que) <br>\r\n&emsp; == (igual a) <br>\r\n&emsp; <= (menor que o igual a) <br>\r\n&emsp; >= (mayor que o igual a) <br>\r\n&emsp; != (diferente que) <br><br>\r\n\r\nLos cuales podemos concatenar para crear operaciones logicas mas completas, usando && (y), || (o). <br><br>\r\n\r\nestos ultimos 2 tienen algo llamado tabla de verdad, lo cual determina cuando se hacer verdadero y cuando falso: <br><br>\r\n\r\n<b> Tabla de verdad de && (y) </b> <br><br>\r\n\r\nvalidacion1 &emsp; validacion2 &emsp; Resultado <br>\r\n&emsp;      v      &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;      v     &emsp;&emsp;&emsp;&emsp;&emsp;           v      <br>\r\n&emsp;      v      &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;      f     &emsp;&emsp;&emsp;&emsp;&emsp;\t   \t    f      <br>\r\n&emsp;      f      &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;      v     &emsp;&emsp;&emsp;&emsp;&emsp;           f      <br>\r\n&emsp;      f      &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;      f     &emsp;&emsp;&emsp;&emsp;&emsp;           f      <br><br>\r\n\r\n<br>\r\n\r\n<b> Tabla de verdad de || (o) </b> <br><br>\r\n\r\nvalidacion1 &emsp; validacion2 &emsp; Resultado <br>\r\n&emsp;      v      &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;      v     &emsp;&emsp;&emsp;&emsp;&emsp;           v      <br>\r\n&emsp;      v      &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;      f     &emsp;&emsp;&emsp;&emsp;&emsp;\t   \t    v      <br>\r\n&emsp;      f      &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;      v     &emsp;&emsp;&emsp;&emsp;&emsp;           v      <br>\r\n&emsp;      f      &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;      f     &emsp;&emsp;&emsp;&emsp;&emsp;           f      <br><br>\r\n\r\n<br> <br>\r\n\r\n<b> Sigue aprendiendo :) </b> <br> <br>\r\n\r\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/cUqA4ggEQvk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\r\n\r\n<br><br>\r\n\r\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/5rbUC6sGf4I\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"
    },
    {
        "Contenido": "<h3> Sentencias If-Else </h3 <br><br>\r\n\r\nCuando nosotros queremos realizar validaciones en la vida comun usamos palabras claves cono \"si\" y \"sino\" para tomar descisiones, <br>\r\nen C pasa algo similar, cuando en un programa queremos validar sentencias para generar una accion cuando eso pase podemos usar las palabras <br>\r\nclaves if (si) y else (sino). <br><br>\r\n\r\nUn ejemplo seria validar si un numero es par o impar; en nuestro idioma seria algo como: <br><br>\r\n\r\nsi el numero es par, entonces imprimir: el n umero es par <br>\r\nsino escribir: el numero no es par <br><br>\r\n\r\nEn C se veria de la siguiente forma: <br><br>\r\n\r\nif (numero % 2 == 0) printf(\"el numero es par\"); <br>\r\nelse printf(\"el numero no es par\"); <br><br>\r\n\r\nla sintaxis del if en c es la siguiente: <br><br>\r\n\r\nif (validacion o sentencias) { <br>\r\n    &emsp;// accion a realizar <br>\r\n} <br><br>\r\n\r\nLa sintaxis del if-else en c es la siguiente: <br><br>\r\n\r\nif (validacion o sentencias) { <br>\r\n    &emsp;// accion-1 <br>\r\n} <br>\r\nelse { <br>\r\n    &emsp;// accion-2 <br>\r\n} <br><br>\r\n\r\nSi la sentencia se cumple realizara la accion-1 sino relaizara la accion-2 <br><br>\r\n\r\nAhora veamos esto en codigo para entenderlo mejor, supongamos que queremos vaidar si un numero es par o impar, lo relizaremos de la siguiente forma: <br><br>\r\n\r\n// incluimos las librerias <br>\r\n#include <stdio.h> <br><br>\r\n\r\n// usamos el metodo main <br>\r\nint main() <br>\r\n{ <br>\r\n\r\n    &emsp;// declaramos la variable que guardara el numero <br>\r\n    &emsp;int numero; <br><br>\r\n\r\n\t&emsp;// pedimos los valores de los numeros <br>\r\n\t&emsp;printf(\"Ingrese un numero entero: \"); <br>\r\n\t&emsp;scanf(\"%d\", &numero); <br><br>\r\n\r\n\t&emsp;// usamos % para saber si el numero es par al obtener el residuo del numero dividido entre 2 <br>\r\n\t&emsp;if (numero % 2 == o) { <br>\r\n\r\n\t&emsp;&emsp;// imprimimos el resultado <br>\r\n\t&emsp;&emsp;printf(\"el numero %d es par\", numero); <br>\r\n\r\n\t&emsp;} <br>\r\n\t&emsp;else { <br>\r\n\r\n\t&emsp;&emsp;// imprimimos el resultado <br>\r\n\t&emsp;&emsp;printf(\"el numero %d es impar\", numero); <br>\r\n\r\n\t&emsp;} <br><br>\r\n\r\n    &emsp;// finalizamos el main <br>\r\n    &emsp;return 0; <br>\r\n\r\n} <br><br><br>\r\n\r\nEn las sentencias if-else tambiem podemos hacer uso de los operadores logicos, veamos un jemplo de como saber si un numero esta entre 1 y 10\r\n<br><br>\r\n\r\n// incluimos las librerias <br>\r\n#include <stdio.h> <br><br>\r\n\r\n// usamos el metodo main <br>\r\nint main() <br>\r\n{ <br>\r\n\r\n    &emsp;// declaramos la variable que guardara el numero <br>\r\n    &emsp;int numero; <br><br>\r\n\r\n\t&emsp;// pedimos los valores de los numeros <br>\r\n\t&emsp;printf(\"Ingrese un numero entero: \"); <br>\r\n\t&emsp;scanf(\"%d\", &numero); <br><br>\r\n\r\n\t&emsp;// usamos los operadores <, > para realizar las sentencias individuales y las unimos con el operador && (y) <br>\r\n\t&emsp;if (numero > 0 && numero < 11) { <br>\r\n\r\n\t&emsp;&emsp;// imprimimos el resultado <br>\r\n\t&emsp;&emsp;printf(\"el numero %d esta entre 1 y 10\", numero); <br>\r\n\r\n\t&emsp;} <br>\r\n\t&emsp;else { <br>\r\n\r\n\t&emsp;&emsp;// imprimimos el resultado <br>\r\n\t&emsp;&emsp;printf(\"el numero %d no esta entre 1 y 10\", numero); <br>\r\n\r\n\t&emsp;} <br><br>\r\n\r\n    &emsp;// finalizamos el main <br>\r\n    &emsp;return 0; <br>\r\n\r\n} <br><br>\r\n\r\n<b> sigue aprendiendo :) </b> <br><br>\r\n\r\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/GTbTvfepSto\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"
    },
    {
        "Contenido": "<h3> Ciclo For </h3> <br><br>\r\n\r\nEn programacion un ciclo o una iteracion es un bloque de codigo que se repite hasta cumplir una condicion. <br><br>\r\n\r\nDentro de los ciclos podemos encontrar una de los mas censillos de utilizar, este el el ciclo for (para), <br>\r\neste ciclo se compone de la siguiente manera: <br><br>\r\n\r\nfor(inicio; fin, paso){} <br><br>\r\n\r\ninicio: es el parametro que indica desde que punto va a comenzar a iterar (es una asignacion) <br>\r\nfin: indica hasta donde dejara de iterar el ciclo, pude ser un valor numerico o una condicion <br>\r\npaso: indica con que frecuencia ira cambiando la variable iteradora por cada iteracion <br><br>\r\n\r\nveamos un ejemplo de como imprimir los numeros del 0 al 9: <br><br>\r\n\r\npodriamos simplemente escribir: <br><br>\r\n\r\nprintf(\"0\\n\");<br>\r\nprintf(\"1\\n\");<br>\r\nprintf(\"2\\n\");<br>\r\n...<br>\r\nprintf(\"9\\n\");<br><br>\r\n\r\nsin embargo esto en codigo es muy largo, imagina que no fueran 10 numeros sino 100 0 1000, eso sin duda seria extenso para usar un printf() por cada numero <br><br>\r\n\r\nasi que en lugar de eso usemo un ciclo para generarlo: <br><br>\r\n\r\nfor (int i = 0; i < 10; i++){ <br>\r\nprintf(\"%d\\n\", i); <br>\r\n} <br><br>\r\n\r\nint i = 0 --> es el inicio, i es la variable iteradora <br>\r\ni < 10 --> es la condicion de fin, es decir que iterara mientras el valor de i sea menor que 10 <br>\r\ni++ --> indica que aumentaremos el valor de i de uno en uno <br><br>\r\n\r\nsi observas este ultimo paso usamos \"++\" para incrementar el valor de i, <br>\r\nen c podemos incrementar valores con el signo + y el signo =, i++ es lo mismo que escribir i = i + 1; <br><br>\r\n\r\npara ahorrarnos lineas podemos usar ++ para incrementar por uno, de lo contrario tendremos que hacerlo asi: i += valor; <br>\r\ndonde valor es el numero por el cual queremos incrementar <br><br>\r\n\r\nejemplo: inprimir los numero del 0 al 9 de dos en dos <br><br>\r\n\r\nfor (int i = 0; i < 10; i += 2){ <br>\r\nprintf(\"%d\\n\", i); <br>\r\n} <br><br>\r\n\r\nesto aplica para cualquier operador aritmetico (- * /)\r\n\r\n<br> <br>\r\n\r\n<b> Sigue aprendiendo :) </b> <br> <br>\r\n\r\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/hZXFl4n6854\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"
    },
    {
        "Contenido": "<h3> Ciclos while y do-while </h3> <br><br>\r\n\r\n</b>El ciclo While</b> <br><br>\r\n\r\nEl ciclo while es un poc diferente al ciclo for, tambien tiene un inicio, un fin y un aumento, solo que de otro modo. <br><br>\r\n\r\nSi bien el ciclo for lo usamos cuando sabemos el numero de iteraciones que haremos, el while nos ayuda a iterar una cantidasd de veces indeterminada o que no sabemos<br>\r\nde antemano. <br><br>\r\n\r\nla estructura del while es: <br><br>\r\n\r\ninicio <br><br>\r\n\r\nwhile(condicion de fin){ <br>\r\n    ... <br>\r\n    paso <br>\r\n} <br>\r\n\r\na diferencia del for, el while no tiene sus 3 partes en una misma linea, veamos un ejemplo para entender como funciona: <br><br>\r\n\r\nimprimir los datos de i mientras sea diferente al numero especificado <br><br>\r\n\r\ningresa el siguiente codigo dentro de un programa de C, mas especifico dentro del main <br><br>\r\n\r\n----------------------------------------------------------------------------------------------------- <br><br>\r\n\r\nint numeroFin; <br>\r\n\r\nprintf(\"ingresa su numero de paro: \\n\"); <br>\r\nscanf(\"%d\", &numeroFin); <br><br>\r\n\r\n\r\nint i = o; // inicio <br><br>\r\n\r\nwhile (i != numeroFin){ // condicion de fin <br>\r\n\r\n    printf(\"%d\", i); <br>\r\n    i++; // incremento o paso <br><br>\r\n\r\n    printf(\"\\n\\ningresa su numero de paro: \\n\"); <br>\r\n    scanf(\"%d\", &numeroFin); <br>\r\n\r\n} <br><br>\r\n\r\n------------------------------------------------------------------------------------------------------------------------------- <br><br>\r\n\r\n</b>El ciclo do-while</b> <br><br>\r\n\r\nel ciclo do-while es parecido al ciclo while, pero con una leve variacion, primero veamos su forma: <br><br>\r\n\r\ninicio <br><br>\r\n\r\ndo{ <br>\r\n\r\n    paso <br>\r\n\r\n}while(condicion fin); <br><br>\r\n\r\ncomo pueden observar el ciclo while valida antes de iterar, mientras que el ciclo do-while itera almenos una vez antes de cualquier validacion. <br><br>\r\n\r\nveamos como se miraria el mismo ejemplo pero ahora usando do while: <br><br>\r\n\r\n------------------------------------------------------------------------------------------------------------------------------------ <br><br>\r\n\r\nint numeroFin; <br>\r\nint i = 0; // inicio <br><br>\r\n\r\ndo{ <br>\r\n\r\n    printf(\"%d\", i); <br>\r\n    i++; // incremento o paso //paso o incremento <br><br>\r\n\r\n    printf(\"\\n\\ningresa su numero de paro: \\n\"); <br>\r\n    scanf(\"%d\", &numeroFin); <br>\r\n\r\n} while(i != numeroFin); //validacion <br><br>\r\n"
    },
    {
        "Contenido": "<h3> Arreglos en C </h3> <br>\r\n\r\nEn C no existe un tipo de datos que acepte un conjunto de caracteres como una palabra, si bien existe el tipo de dato 'char' <br>\r\neste solo puede guardar un caracter a la vez. <br><br>\r\n\r\npara poder guardar"
    },
    {
        "Contenido": "<h3> Funciones en C </h3>"
    }
]